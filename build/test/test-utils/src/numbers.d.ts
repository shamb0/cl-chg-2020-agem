/// <reference types="node" />
import BigNum = require('bn.js');
export declare type Endianness = 'B' | 'L';
export declare const BIG_ENDIAN: Endianness;
export declare const LITTLE_ENDIAN: Endianness;
export declare class BigNumber {
    private readonly num;
    constructor(number: number | string | number[] | Uint8Array | Buffer | BigNumber | BigNum, base?: number | 'hex', endian?: Endianness);
    static min(left: BigNumber, right: BigNumber): BigNumber;
    static max(left: BigNumber, right: BigNumber): BigNumber;
    static isBigNumber(num: any): boolean;
    clone(): BigNumber;
    toString(base?: number | 'hex', length?: number): string;
    toJSON(): string;
    toNumber(): number;
    toBuffer(endian?: Endianness, length?: number): Buffer;
    add(other: BigNumber): BigNumber;
    sub(other: BigNumber): BigNumber;
    mul(other: BigNumber): BigNumber;
    div(other: BigNumber): BigNumber;
    divRound(other: BigNumber): BigNumber;
    pow(exp: BigNumber): BigNumber;
    mod(mod: BigNumber): BigNumber;
    modNum(mod: number): BigNumber;
    abs(): BigNumber;
    xor(num: BigNumber): BigNumber;
    and(num: BigNumber): BigNumber;
    shiftLeft(num: number): BigNumber;
    shiftRight(num: number): BigNumber;
    shiftLeftInPlace(num: number): BigNumber;
    shiftRightInPlace(num: number): BigNumber;
    gt(other: BigNumber): boolean;
    gte(other: BigNumber): boolean;
    lt(other: BigNumber): boolean;
    lte(other: BigNumber): boolean;
    eq(other: BigNumber): boolean;
    equals(other: BigNumber): boolean;
    compare(other: BigNumber): -1 | 0 | 1;
    private getBigNumEndianness;
}
export declare const ZERO: BigNumber;
export declare const ONE: BigNumber;
export declare const TWO: BigNumber;
export declare const THREE: BigNumber;
export declare const ONE_HALF: BigNumber;
export declare const MAX_BIG_NUM: BigNumber;
